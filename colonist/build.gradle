buildscript {
  apply from: '../versions.gradle'

  repositories {
    mavenLocal()
    google()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "com.android.tools.build:gradle:$androidToolsVersion"
    classpath "io.michaelrocks.pablo:pablo:$pabloVersion"
  }
}

plugins {
  id "org.jlleitschuh.gradle.ktlint" version "10.2.1"
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

allprojects {
  version = COLONIST_VERSION
  group = COLONIST_GROUP

  buildscript {
    repositories {
      mavenLocal()
      google()
      mavenCentral()
    }
  }

  repositories {
    mavenLocal()
    google()
    mavenCentral()
  }

  apply plugin: "org.jlleitschuh.gradle.ktlint"

  gradle.projectsEvaluated {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
      kotlinOptions {
        jvmTarget = "1.8"
        allWarningsAsErrors = true
      }
    }
  }
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
    }
  }
}

apply plugin: 'kotlin'

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

dependencies {
  functionalTestImplementation gradleTestKit()
  functionalTestImplementation "junit:junit:$junitVersion"
}

tasks.register("functionalTest", Test.class) {
  description = "Runs functional tests."
  group = "verification"

  testClassesDirs = project.sourceSets.functionalTest.output.classesDirs
  classpath = project.sourceSets.functionalTest.runtimeClasspath
}

afterEvaluate {
  tasks.named("functionalTest") {
    subprojects.each {
      dependsOn(it.tasks.named("publishToMavenLocal"))
    }
  }
}
